# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from django.db import models
from django.utils.encoding import smart_unicode
from mathfield.api import get_math
import json

class MathField(models.TextField):

    description = 'Field that allows you to write LaTeX and display it as HTML.'

    def to_python(self, value):
        """ The data is serialized as JSON with the keys `raw` and `html` where
            `raw` is the entered string with LaTeX and `html` is the html string
            generated by KaTeX. If this function gets just a string,
            then we need to generate the LaTeX.

            WARNING: Generating the LaTeX server-side requires Node.js to be
            installed. To generate the LaTeX client-side, make sure that you
            specify that the MathFields that you use are assigned to the widget
            `MathFieldWidget` in your app's admin.py.
        """
        value = smart_unicode(value)
        if not value:
            return None
        try: 
            ret = json.loads(value)
        except ValueError:
            # we got a string instead of valid JSON. Let's make the LaTeX now.
            ret = get_math(value)
        return ret

    def get_prep_value(self, value):
        return json.dumps(value)

    def formfield(self, **kwargs):
        defaults = {
            'help_text': ('Type text as you would normally.' 
                'If you want to write LaTeX, surround it with $ characters.')
        }
        defaults.update(kwargs)
        field = super(MathField, self).formfield(**defaults)
        field.max_length = self.max_length
        return field